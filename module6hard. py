import math

class Figure:
    def __init__(self, color, *sides):
        self.__sides = []
        self.__color = []
        self.filled = False
        self.sides_count = 0
        self.set_color(*color)
        self.set_sides(*sides)

    def get_color(self):
        return self.__color

    def __is_valid_color(self, r, g, b):
        return all(isinstance(x, int) and 0 <= x <= 255 for x in (r, g, b))

    def set_color(self, r, g, b):
        if self.__is_valid_color(r, g, b):
            self.__color = [r, g, b]

    def __is_valid_sides(self, *new_sides):
        return (len(new_sides) == self.sides_count and
                all(isinstance(side, int) and side > 0 for side in new_sides))

    def get_sides(self):
        return self.__sides

    def len(self):
        return sum(self.__sides)

    def set_sides(self, *new_sides):
        if self.__is_valid_sides(*new_sides):
            self.__sides = list(new_sides)

class Circle(Figure):
    def __init__(self, color, *sides):
        self.sides_count = 1
        super().__init__(color, *sides)
        if self.get_sides():
            self.__radius = self.get_sides()[0]

    def get_square(self):
        return math.pi * self.__radius ** 2

    def set_sides(self, *new_sides):
        if len(new_sides) == 1:
            super().set_sides(*new_sides)
            self.__radius = new_sides[0]
        else:
            super().set_sides(1)  # Установим дефолтное значение

class Triangle(Figure):
    def __init__(self, color, *sides):
        self.sides_count = 3
        super().__init__(color, *sides)

    def get_square(self):
        a, b, c = self.get_sides()
        s = (a + b + c) / 2
        return math.sqrt(s * (s - a) * (s - b) * (s - c))

class Cube(Figure):
    def __init__(self, color, *sides):
        self.sides_count = 12
        super().__init__(color, *sides)
        if self.get_sides():
            self.__side_length = self.get_sides()[0]

    def set_sides(self, *new_sides):
        if len(new_sides) == 1:
            super().set_sides(*([new_sides[0]] * self.sides_count))
            self.__side_length = new_sides[0]
        else:
            super().set_sides(*([1] * self.sides_count))  # Установим дефолтное значение

    def get_volume(self):
        return self.__side_length ** 3

# Проверка
circle1 = Circle((200, 200, 100), 10)
cube1 = Cube((222, 35, 130), 6)

# Проверка на изменение цветов
circle1.set_color(55, 66, 77)
print(circle1.get_color())  # [55, 66, 77]
cube1.set_color(300, 70, 15)
print(cube1.get_color())  # [222, 35, 130]

# Создаём объекты классов
cube1 = Cube((0, 0, 0), 5)
circle1 = Circle((255, 255, 0), 15)

# Проверка изменения сторон и получения сторон
cube1.set_sides(5, 3, 12, 4, 5)  # Не изменится
print(cube1.get_sides())  # Ожидаем (5,)

circle1.set_sides(15)  # Изменится
print(circle1.get_sides())  # Ожидаем (15,)

# Проверка периметра (круга)
print(circle1.len())  # Ожидаем 2 * π * 15

# Проверка объёма (куба)
print(cube1.get_volume())  # Ожидаем 5 ** 3

print(isinstance(cube1, Cube))  # Ожидаем True
print(isinstance(circle1, Circle))  # Ожидаем True
   