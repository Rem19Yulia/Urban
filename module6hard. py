class Figure:
    def __init__(self, color=(255, 255, 255), *sides):
        self.__sides = []
        self.__color = []
        self.filled = False
        self.sides_count = 0
        
        self.set_color(*color)
        self.set_sides(*sides)

    def __is_valid_color(self, r, g, b):
        return all(isinstance(value, int) and 0 <= value <= 255 for value in (r, g, b))

    def set_color(self, r, g, b):
        if self.__is_valid_color(r, g, b):
            self.__color = [r, g, b]

    def get_color(self):
        return self.__color

    def __is_valid_sides(self, *new_sides):
        return len(new_sides) == self.sides_count and all(isinstance(side, int) and side > 0 for side in new_sides)

    def set_sides(self, *new_sides):
        if self.__is_valid_sides(*new_sides):
            self.__sides = list(new_sides)

    def get_sides(self):
        return self.__sides

    def len(self):
        return sum(self.__sides)  # Периметр

class Circle(Figure):
    sides_count = 1

    def __init__(self, color=(255, 255, 255), *sides):
        super().__init__(color, *sides)
        if self.get_sides() == []:
            self.set_sides(1)  # Установить минимально допустимое значение

    def get_square(self):
        radius = self.get_sides()[0] / (2 * 3.14)  # длина окружности = 2 * π * r
        return 3.14 * radius ** 2

class Triangle(Figure):
    sides_count = 3

    def __init__(self, color=(255, 255, 255), *sides):
        super().__init__(color, *sides)
        if self.get_sides() == []:
            self.set_sides(1, 1, 1)

    def get_square(self):
        s = self.len() / 2  # полупериметр
        a, b, c = self.get_sides()
        return (s * (s - a) * (s - b) * (s - c)) ** 0.5  # Формула Герона

class Cube(Figure):
    sides_count = 12

    def __init__(self, color=(255, 255, 255), side_length=1, *sides):
        super().__init__(color, *sides)
        if self.get_sides() == []:
            self.set_sides(*([side_length] * 12))
        elif len(sides) == 1 and len(sides[0]) == 0:  # случай, когда не были переданы стороны
            self.set_sides(*([side_length] * 12))

    def get_volume(self):
        return self.get_sides()[0] ** 3
 